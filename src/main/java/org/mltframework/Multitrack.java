/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.mltframework;

public class Multitrack extends Producer {
  private long swigCPtr;

  protected Multitrack(long cPtr, boolean cMemoryOwn) {
    super(mltJNI.Multitrack_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Multitrack obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mltJNI.delete_Multitrack(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Multitrack(SWIGTYPE_p_mlt_multitrack_s multitrack) {
    this(mltJNI.new_Multitrack__SWIG_0(SWIGTYPE_p_mlt_multitrack_s.getCPtr(multitrack)), true);
  }

  public Multitrack(Service multitrack) {
    this(mltJNI.new_Multitrack__SWIG_1(Service.getCPtr(multitrack), multitrack), true);
  }

  public Multitrack(Multitrack multitrack) {
    this(mltJNI.new_Multitrack__SWIG_2(Multitrack.getCPtr(multitrack), multitrack), true);
  }

  public SWIGTYPE_p_mlt_multitrack_s get_multitrack() {
    long cPtr = mltJNI.Multitrack_get_multitrack(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_mlt_multitrack_s(cPtr, false);
  }

  public SWIGTYPE_p_mlt_producer_s get_producer() {
    long cPtr = mltJNI.Multitrack_get_producer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_mlt_producer_s(cPtr, false);
  }

  public int connect(Producer producer, int index) {
    return mltJNI.Multitrack_connect(swigCPtr, this, Producer.getCPtr(producer), producer, index);
  }

  public int clip(mlt_whence whence, int index) {
    return mltJNI.Multitrack_clip(swigCPtr, this, whence.swigValue(), index);
  }

  public int count() {
    return mltJNI.Multitrack_count(swigCPtr, this);
  }

  public Producer track(int index) {
    long cPtr = mltJNI.Multitrack_track(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Producer(cPtr, true);
  }

  public void refresh() {
    mltJNI.Multitrack_refresh(swigCPtr, this);
  }

}
